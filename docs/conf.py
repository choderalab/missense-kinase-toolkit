#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/stable/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.

# Incase the project was not installed
import os
import sys

import mkt.schema
import mkt.databases


# -- Project information -----------------------------------------------------

project = "missense-kinase-toolkit"
copyright = (
    "2024, Jess White. Project structure based on the "
    "Computational Molecular Science Python Cookiecutter version 1.1"
)
author = "Jess White"

# The short X.Y version
version = ""
# The full version, including alpha/beta/rc tags
release = ""


# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    "sphinx.ext.autosummary",
    "sphinx.ext.autodoc",
    "sphinx.ext.mathjax",
    "sphinx.ext.viewcode",
    "sphinx.ext.intersphinx",
    "sphinx.ext.extlinks",
    "sphinx.ext.napoleon",
]

autosummary_generate = True
autosummary_mock_imports = []

# Napoleon settings for NumPy-style docstrings
napoleon_google_docstring = False
napoleon_numpy_docstring = True
napoleon_include_init_with_doc = True
napoleon_include_private_with_doc = True
napoleon_use_param = False
napoleon_use_ivar = True
napoleon_use_rtype = True

# Autodoc settings
autodoc_default_options = {
    'members': True,
    'undoc-members': True,
    'show-inheritance': True,
    'private-members': False,
    'special-members': '__init__',
    'inherited-members': False,  # Don't show inherited members by default
}

# Skip inherited methods from common base classes
def skip_member(app, what, name, obj, skip, options):
    """Skip inherited methods from standard libraries like Pydantic BaseModel."""
    # Skip specific Pydantic BaseModel methods that clutter the docs
    pydantic_methods = {
        'construct', 'from_orm', 'parse_obj', 'parse_raw', 'parse_file',
        'update_forward_refs', 'validate', 'copy', 'dict', 'json',
        'schema', 'schema_json', 'fields', '__fields__', '__config__',
        'model_construct', 'model_copy', 'model_dump', 'model_dump_json',
        'model_fields', 'model_validate', 'model_validate_json'
    }

    # Skip common Python object methods that aren't useful in API docs
    python_builtin_methods = {
        '__dir__', '__format__', '__ge__', '__getattribute__', '__gt__',
        '__init_subclass__', '__le__', '__lt__', '__ne__', '__new__',
        '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__',
        '__str__', '__subclasshook__', '__weakref__', '__delattr__',
        '__hash__', '__class__'
    }

    # Skip internal Pydantic and Python attributes that clutter docs
    internal_attributes = {
        '__abstractmethods__', '__annotations__', '__dict__', '__doc__',
        '__module__', '__slots__', '_abc_impl', '__fields_set__',
        '__pydantic_fields_set__', '__pydantic_extra__', '__pydantic_private__',
        '__class_vars__', '__private_attributes__', '__pydantic_complete__',
        '__pydantic_computed_fields__', '__pydantic_core_schema__', '__pydantic_custom_init__',
        '__pydantic_fields__', '__pydantic_generic_metadata__', '__pydantic_parent_namespace__',
        '__pydantic_post_init__', '__pydantic_root_model__', '__signature__',
        'model_computed_fields', 'model_config', 'model_extra', 'model_fields_set'
    }

    if name in pydantic_methods or name in python_builtin_methods or name in internal_attributes:
        return True

    # Also skip if the method is defined in a standard library module
    if hasattr(obj, '__module__'):
        module = getattr(obj, '__module__', '')
        if module and (module.startswith('pydantic') or module.startswith('enum') or module == 'builtins'):
            return True

    return skip

def setup(app):
    """Sphinx extension setup."""
    app.connect('autodoc-skip-member', skip_member)

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]
exclude_patterns = ["*/tests", "*/tests/*", "*/test_*", "*/tests.py", "*/test_*.py"]

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = ".rst"

# The master toctree document.
master_doc = "index"

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = "en"

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path .
exclude_patterns = ["_build", "Thumbs.db", ".DS_Store"]

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = "default"


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = "sphinx_rtd_theme"

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["_static"]

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = "missense_kinase_toolkitdoc"


# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',
    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',
    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',
    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (
        master_doc,
        "missense_kinase_toolkit.tex",
        "missense-kinase-toolkit Documentation",
        "missense_kinase_toolkit",
        "manual",
    ),
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (
        master_doc,
        "missense_kinase_toolkit",
        "missense-kinase-toolkit Documentation",
        [author],
        1,
    )
]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (
        master_doc,
        "missense_kinase_toolkit",
        "missense-kinase-toolkit Documentation",
        author,
        "missense_kinase_toolkit",
        "A Python package to generate sequence and structure-based representations for human kinase property prediction",
        "Miscellaneous",
    ),
]


# -- Extension configuration -------------------------------------------------

here = os.path.dirname(__file__)
repo = os.path.join(here,  '..')

# Ensure env.metadata[env.docname]['nbsphinx-link-target']
# points relative to repo root:
nbsphinx_link_target_root = repo


nbsphinx_prolog = (
r"""
{% if env.metadata[env.docname]['nbsphinx-link-target'] %}
{% set docpath = env.metadata[env.docname]['nbsphinx-link-target'] %}
{% else %}
{% set docpath = env.doc2path(env.docname, base='docs/source/') %}
{% endif %}

.. only:: html

    .. role:: raw-html(raw)
        :format: html

    .. nbinfo::
        This page was generated from `{{ docpath }}`__.

    __ https://github.com/choderalab/missense-kinase-toolkit/tree/main/
        """ +
    r"{{ docpath }}"
)
